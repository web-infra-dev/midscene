import './sidebar.less';
import { useAllCurrentTasks, useExecutionDump } from '@/components/store';
import type {
  ExecutionTask,
  ExecutionTaskInsightLocate,
  GroupedActionDump,
} from '@midscene/core';
import { iconForStatus, timeCostStrElement } from '@midscene/visualizer';
import { typeStr } from '@midscene/web/ui-utils';
import { Tag, Tooltip } from 'antd';
import { useEffect } from 'react';
import CameraIcon from '../icons/camera.svg?react';
import MessageIcon from '../icons/message.svg?react';
import type { ExecutionDumpWithPlaywrightAttributes } from '../types';
import ReportOverview from './report-overview';

const SideItem = (props: {
  task: ExecutionTask;
  selected?: boolean;
  onClick?: () => void;
  onItemHover?: (task: ExecutionTask | null, x?: number, y?: number) => any;
  proModeEnabled?: boolean;
}): JSX.Element => {
  const { task, onClick, selected } = props;

  const selectedClass = selected ? 'selected' : '';
  let statusText: JSX.Element | string = task.status;

  const cacheEl =
    task.hitBy?.from === 'Cache' ? (
      <Tag
        style={{
          color: '#1890FF',
          backgroundColor: '#E0F5FF',
          padding: '0 4px',
          marginLeft: '4px',
          marginRight: 0,
          lineHeight: '16px',
        }}
        bordered={false}
      >
        cache
      </Tag>
    ) : null;

  const deepThinkEl = (task as ExecutionTaskInsightLocate)?.log?.dump
    ?.deepThink ? (
    <Tag
      bordered={false}
      style={{
        color: '#722ED1',
        backgroundColor: '#F7EBFF',
        padding: '0 4px',
        marginLeft: '4px',
        marginRight: 0,
        lineHeight: '16px',
      }}
    >
      deepthink
    </Tag>
  ) : null;

  if (task.timing?.cost) {
    statusText = timeCostStrElement(task.timing.cost);
  }

  const statusIcon =
    task.status === 'finished' && task.error
      ? iconForStatus('finishedWithWarning')
      : iconForStatus(task.status);

  const titleTextIcon =
    task.type === 'Planning' ? (
      <span
        style={{
          display: 'inline-flex',
          alignItems: 'center',
          marginLeft: '4px',
        }}
      >
        <CameraIcon width={16} height={16} />
      </span>
    ) : null;

  return (
    <div
      className={`side-item ${selectedClass}`}
      onClick={onClick}
      // collect x,y (refer to the body) for hover preview
      onMouseEnter={(event) => {
        const rect = event.currentTarget.getBoundingClientRect();
        const x = rect.left + rect.width;
        const y = rect.top;
        props.onItemHover?.(task, x, y);
      }}
      onMouseLeave={() => {
        props.onItemHover?.(null);
      }}
    >
      {' '}
      <div
        className={`side-item-name ${props.proModeEnabled ? 'pro-mode' : ''}`}
      >
        <span className="status-icon">{statusIcon}</span>
        <div
          className="title"
          style={{ display: 'flex', alignItems: 'center' }}
        >
          {typeStr(task)} {titleTextIcon}
          {cacheEl}
          {deepThinkEl}
        </div>
        <div className="status-text">{statusText}</div>
        {/* Display usage info in table style if available and Pro mode is enabled */}
        {props.proModeEnabled && (
          <>
            <Tooltip title="Input tokens sent to the AI model">
              <div className="usage-column prompt-tokens">
                {task.usage?.prompt_tokens || '-'}
              </div>
            </Tooltip>
            <Tooltip title="Output tokens generated by the AI model">
              <div className="usage-column completion-tokens">
                {task.usage?.completion_tokens || '-'}
              </div>
            </Tooltip>
          </>
        )}
      </div>
    </div>
  );
};

interface SidebarProps {
  dumps?: ExecutionDumpWithPlaywrightAttributes[];
  selectedDump?: GroupedActionDump | null;
  onDumpSelect?: (dump: GroupedActionDump) => void;
  proModeEnabled?: boolean;
}

const Sidebar = (props: SidebarProps = {}): JSX.Element => {
  const { dumps, selectedDump, onDumpSelect, proModeEnabled = false } = props;
  const sdkVersion = useExecutionDump((store) => store.sdkVersion);
  const modelName = useExecutionDump((store) => store.modelName);
  const modelDescription = useExecutionDump((store) => store.modelDescription);
  const groupedDump = useExecutionDump((store) => store.dump);
  const setActiveTask = useExecutionDump((store) => store.setActiveTask);
  const activeTask = useExecutionDump((store) => store.activeTask);
  const setHoverTask = useExecutionDump((store) => store.setHoverTask);
  const setHoverPreviewConfig = useExecutionDump(
    (store) => store.setHoverPreviewConfig,
  );
  // const selectedTaskIndex = useExecutionDump((store) => store.selectedTaskIndex);
  // const setSelectedTaskIndex = useExecutionDump((store) => store.setSelectedTaskIndex);

  const allTasks = useAllCurrentTasks();
  const currentSelectedIndex = allTasks?.findIndex(
    (task) => task === activeTask,
  );

  useEffect(() => {
    // all tasks
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!allTasks?.length || allTasks?.length <= 1) {
        return;
      }
      // should be command / ctrl + arrow
      if (e.key === 'ArrowUp' && (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        const nextIndex = currentSelectedIndex - 1;
        if (nextIndex < 0) {
          return;
        }
        const nextTask = allTasks[nextIndex];
        setActiveTask(nextTask);
      } else if (e.key === 'ArrowDown' && (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        const nextIndex = currentSelectedIndex + 1;
        if (nextIndex >= allTasks.length) {
          return;
        }
        const nextTask = allTasks[nextIndex];
        setActiveTask(nextTask);
      }
    };
    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [currentSelectedIndex, allTasks, setActiveTask]);

  const sideList = groupedDump ? (
    [groupedDump].map((group, groupIndex) => {
      const executions = group.executions.map((execution, indexOfExecution) => {
        const { tasks } = execution;
        const taskList = tasks.map((task, index) => {
          return (
            <SideItem
              key={index}
              task={task}
              selected={task === activeTask}
              proModeEnabled={proModeEnabled}
              onClick={() => {
                setActiveTask(task);
              }}
              onItemHover={(hoverTask, x, y) => {
                if (hoverTask && x && y) {
                  setHoverPreviewConfig({ x, y });
                  setHoverTask(hoverTask);
                } else {
                  setHoverPreviewConfig(null);
                  setHoverTask(null);
                }
              }}
            />
          );
        });

        // Add table header when pro mode is enabled
        const tableHeader = proModeEnabled ? (
          <div className="table-header">
            <div className="header-name">Name</div>
            <div className="header-time">Time</div>
            <div className="header-prompt">Prompt</div>
            <div className="header-completion">Completion</div>
          </div>
        ) : null;
        return (
          <div key={indexOfExecution}>
            <div className="side-seperator side-seperator-space-up" />
            <div
              className="side-sub-title"
              style={{ display: 'flex', alignItems: 'flex-start' }}
            >
              {execution.name}
            </div>
            {tableHeader}
            {taskList}
          </div>
        );
      });
      return (
        <div key={groupIndex}>
          <ReportOverview
            title={group.groupName}
            version={sdkVersion ?? undefined}
            modelName={modelName ?? undefined}
            modelDescription={modelDescription ?? undefined}
            dumps={dumps}
            selected={selectedDump}
            onSelect={onDumpSelect}
          />
          <div className="execution-info-section">
            <div className="section-separator" />
            <div className="execution-info-title">
              <MessageIcon width={16} height={16} />
              Execution
            </div>
            {executions}
          </div>
        </div>
      );
    })
  ) : (
    <span>no tasks</span>
  );

  return (
    <div className="side-bar">
      <div className="top-controls">
        <div className="task-list">{sideList}</div>
        <div className="side-seperator side-seperator-line side-seperator-space-up" />
        <div className="task-meta-section">
          <div className="task-meta">switch: Command + Up / Down</div>
        </div>
      </div>
      <div className="bottom-controls" />
    </div>
  );
};

export default Sidebar;
